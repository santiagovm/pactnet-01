trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - AnotherConsumerApp

resources:
  containers:
    - container: pact_cli
      image: pactfoundation/pact-cli:latest

pool:
    vmImage: ubuntu-latest
    
variables:
  - group: pactflow-variables

stages:
- stage: dev
  displayName: dev environment

  jobs:
  - job: test
    steps:
      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: test
          arguments: 'AnotherConsumerApp/AnotherConsumerApp.Test/AnotherConsumerApp.Test.csproj --configuration Release'
      - publish: 'AnotherConsumerApp/AnotherConsumerApp.Test/pacts'
        artifact: pacts
        displayName: create pacts artifact
        
  - job: publish_pacts
    displayName: publish pacts
    dependsOn: test
    services:
      pact_cli: pact_cli
    variables:
      GIT_COMMIT_SHORT_SHA: value-set-below
    steps:
      - download: current
        artifact: pacts
        displayName: get pacts artifact
      - script: |
          ls $(Pipeline.Workspace)/pacts
        displayName: list pacts
      - script: |
          sourceVersion=$(Build.SourceVersion)
          echo sourceVersion: $sourceVersion

          shortSha=${sourceVersion:0:7}
          echo shortSha: $shortSha

          echo "##vso[task.setvariable variable=GIT_COMMIT_SHORT_SHA]$shortSha"
        displayName: get commit short sha
      - script: |
          docker run --rm \
            --volume $(Pipeline.Workspace)/pacts:/pacts \
            pactfoundation/pact-cli:latest \
            broker publish /pacts \
            --consumer-app-version=$GIT_COMMIT_SHORT_SHA \
            --tag=$(Build.SourceBranch) \
            --broker-base-url=$PACT_BROKER_BASE_URL \
            --broker-token=$PACT_BROKER_API_TOKEN
        displayName: pact-broker publish
        env:
          PACT_BROKER_BASE_URL: $(pact.broker.base.url)
          PACT_BROKER_API_TOKEN: $(pact.broker.api.token)

  - job: can_i_deploy
    displayName: can i deploy
    dependsOn: publish_pacts
    services:
      pact_cli: pact_cli
    variables:
      GIT_COMMIT_SHORT_SHA: value-set-below
    steps:
      - script: |
          sourceVersion=$(Build.SourceVersion)
          echo sourceVersion: $sourceVersion

          shortSha=${sourceVersion:0:7}
          echo shortSha: $shortSha

          echo "##vso[task.setvariable variable=GIT_COMMIT_SHORT_SHA]$shortSha"
        displayName: get commit short sha
      - script: |
          docker run --rm \
            pactfoundation/pact-cli:latest \
            broker can-i-deploy \
            --pacticipant "Another Consumer App" \
            --version $GIT_COMMIT_SHORT_SHA \
            --to dev \
            --broker-base-url=$PACT_BROKER_BASE_URL \
            --broker-token=$PACT_BROKER_API_TOKEN \
            --retry-while-unknown 2 \
            --retry-interval 10 \
            --verbose
        displayName: pact-broker can-i-deploy
        env:
          PACT_BROKER_BASE_URL: $(pact.broker.base.url)
          PACT_BROKER_API_TOKEN: $(pact.broker.api.token)
          
  - job: deploy
    dependsOn: can_i_deploy
    services:
      pact_cli: pact_cli
    variables:
      GIT_COMMIT_SHORT_SHA: value-set-below
    steps:
      - script: |
          echo fake deployment step that assumes deployment was successful
        displayName: deploy (fake)
      - script: |
          sourceVersion=$(Build.SourceVersion)
          echo sourceVersion: $sourceVersion

          shortSha=${sourceVersion:0:7}
          echo shortSha: $shortSha

          echo "##vso[task.setvariable variable=GIT_COMMIT_SHORT_SHA]$shortSha"
        displayName: get commit short sha
      - script: |
          docker run --rm \
            pactfoundation/pact-cli:latest \
            broker create-version-tag \
            --pacticipant "Another Consumer App" \
            --version $GIT_COMMIT_SHORT_SHA \
            --tag dev \
            --broker-base-url=$PACT_BROKER_BASE_URL \
            --broker-token=$PACT_BROKER_API_TOKEN \
            --verbose
        displayName: pact-broker create-version-tag
        env:
          PACT_BROKER_BASE_URL: $(pact.broker.base.url)
          PACT_BROKER_API_TOKEN: $(pact.broker.api.token)
          
- stage: uat
  displayName: uat environment

  jobs:
    - job: can_i_deploy
      displayName: can i deploy
      services:
        pact_cli: pact_cli
      variables:
        GIT_COMMIT_SHORT_SHA: value-set-below
      steps:
        - script: |
            sourceVersion=$(Build.SourceVersion)
            echo sourceVersion: $sourceVersion

            shortSha=${sourceVersion:0:7}
            echo shortSha: $shortSha

            echo "##vso[task.setvariable variable=GIT_COMMIT_SHORT_SHA]$shortSha"
          displayName: get commit short sha
        - script: |
            docker run --rm \
              pactfoundation/pact-cli:latest \
              broker can-i-deploy \
              --pacticipant "Another Consumer App" \
              --version $GIT_COMMIT_SHORT_SHA \
              --to uat \
              --broker-base-url=$PACT_BROKER_BASE_URL \
              --broker-token=$PACT_BROKER_API_TOKEN \
              --retry-while-unknown 2 \
              --retry-interval 10 \
              --verbose
          displayName: pact-broker can-i-deploy
          env:
            PACT_BROKER_BASE_URL: $(pact.broker.base.url)
            PACT_BROKER_API_TOKEN: $(pact.broker.api.token)

    - deployment: deploy
      dependsOn: can_i_deploy
      environment: uat
      services:
        pact_cli: pact_cli
      variables:
        GIT_COMMIT_SHORT_SHA: value-set-below
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  echo fake deployment step that assumes deployment was successful
                displayName: deploy (fake)
              - script: |
                  sourceVersion=$(Build.SourceVersion)
                  echo sourceVersion: $sourceVersion
      
                  shortSha=${sourceVersion:0:7}
                  echo shortSha: $shortSha
      
                  echo "##vso[task.setvariable variable=GIT_COMMIT_SHORT_SHA]$shortSha"
                displayName: get commit short sha
              - script: |
                  docker run --rm \
                    pactfoundation/pact-cli:latest \
                    broker create-version-tag \
                    --pacticipant "Another Consumer App" \
                    --version $GIT_COMMIT_SHORT_SHA \
                    --tag uat \
                    --broker-base-url=$PACT_BROKER_BASE_URL \
                    --broker-token=$PACT_BROKER_API_TOKEN \
                    --verbose
                displayName: pact-broker create-version-tag
                env:
                  PACT_BROKER_BASE_URL: $(pact.broker.base.url)
                  PACT_BROKER_API_TOKEN: $(pact.broker.api.token)